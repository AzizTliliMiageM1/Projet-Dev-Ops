Projet-Dev-Ops - Résumé étudiant

Ce projet est une application Java (Maven) pour gérer des abonnements. L'objectif est pédagogique : montrer
comment stocker des données simples dans un fichier texte, ajouter des fonctionnalités CRUD, exporter/importer
en JSON, ajouter une API REST minimale et proposer une interface utilisateur (console + GUI).

Fichiers et composants importants :
- src/main/java/com/example/abonnement/Abonnement.java : modèle de données pour un abonnement (nom du service,
  dates, prix, client, dernière utilisation, catégorie). Contient parsing CSV et sérialisation CSV.
- src/main/java/com/example/abonnement/GestionAbonnements.java : interface console (menu). Permet CRUD, recherche,
  enregistrement d'utilisation, export/import JSON. Version améliorée avec affichage coloré.
- src/main/java/com/projet/repository/FileAbonnementRepository.java : persistance file-backed (abonnements.txt) avec
  migration automatique pour anciens formats.
- src/main/java/com/projet/api/ApiServer.java : petit serveur REST (Spark) exposant endpoints /api/abonnements (GET/POST/PUT/DELETE).
- src/main/java/com/example/gui/GestionAbonnementsGui.java : interface graphique Swing (fenêtre, boutons colorés, liste)
  pour gérer les abonnements de façon plus visuelle.

Dépendances principales (dans pom.xml) :
- junit-jupiter (tests)
- slf4j-simple (logging)
- jackson-databind + jackson-datatype-jsr310 (JSON / LocalDate)
- spark-core (API REST légère)

Comment exécuter (étudiant) :
1) Compiler et tester :
   mvn clean test

2) Lancer l'interface graphique :
   mvn exec:java -Dexec.mainClass=com.example.gui.GestionAbonnementsGui

3) Lancer l'interface console :
   mvn exec:java -Dexec.mainClass=com.example.abonnement.GestionAbonnements

4) Lancer l'API REST :
   mvn exec:java -Dexec.mainClass=com.projet.api.ApiServer

Notes sur l'API :
- GET  /api/abonnements        -> renvoie la liste d'abonnements (JSON)
- GET  /api/abonnements/:id    -> renvoie un abonnement par index (0-based)
- POST /api/abonnements        -> ajoute un abonnement (JSON). Exemple de payload :
  {
    "nomService":"Spotify",
    "dateDebut":"2025-01-01",
    "dateFin":"2026-01-01",
    "prixMensuel":9.99,
    "clientName":"Moi",
    "derniereUtilisation":"2025-10-20",
    "categorie":"Musique"
  }

Limitations / prochaines étapes :
- L'API utilise des indices 0-based comme identifiants (pas d'ID persistant) — améliorer avec UUID.
- Ajouter validation côté API (dates invalides, prix négatif) et renvoyer des codes d'erreur appropriés.
- Produire un uber-jar (maven-shade) si tu veux un seul JAR exécutable.

Fait avec style étudiant — j'espère que ça te plaît :) 
